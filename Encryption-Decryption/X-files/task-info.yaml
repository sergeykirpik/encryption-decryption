type: edu
custom_name: stage5
files:
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {
        public EncryptDecryptTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/encryptdecrypt/Decryptor.java
  visible: true
  text: |
    package encryptdecrypt;

    public interface Decryptor {

        char[] decrypt(char[] cypher, int key);
    }
  learner_created: true
- name: src/encryptdecrypt/Encryptor.java
  visible: true
  text: |
    package encryptdecrypt;

    public interface Encryptor {

        char[] encrypt(char[] source, int key);
    }
  learner_created: true
- name: src/encryptdecrypt/UnicodeEncryptor.java
  visible: true
  text: |
    package encryptdecrypt;

    public class UnicodeEncryptor implements Encryptor {

        @Override
        public char[] encrypt(char[] source, int key) {
            char[] cypher = new char[source.length];
            for (int i = 0; i < cypher.length; i++) {
                cypher[i] = (char) (source[i] + key);
            }
            return cypher;
        }
    }
  learner_created: true
- name: src/encryptdecrypt/UnicodeDecryptor.java
  visible: true
  text: |
    package encryptdecrypt;

    public class UnicodeDecryptor implements Decryptor {
        @Override
        public char[] decrypt(char[] cypher, int key) {
            char[] original = new char[cypher.length];
            for (int i = 0; i < original.length; i++) {
                original[i] = (char) (cypher[i] - key);
            }
            return original;
        }
    }
  learner_created: true
- name: src/encryptdecrypt/SimpleEncryptor.java
  visible: true
  text: |-
    package encryptdecrypt;

    import java.util.Arrays;

    public class SimpleEncryptor implements Encryptor {

        static private final String alphabet = "abcdefghijklmnopqrstuvwxyz";

        public char[] encrypt(char[] source) {
            char[] encrypted = new char[source.length];

            for (int i = 0; i < encrypted.length; i++) {
                encrypted[i] = source[i];
                int charIndex = alphabet.indexOf(source[i]);
                if (charIndex >= 0) {
                    int newCharIndex = alphabet.length() - charIndex - 1;
                    encrypted[i] = alphabet.charAt(newCharIndex);
                }
            }
            return encrypted;
        }

        public char[] encrypt(char[] source, int key) {
            char[] cypher = Arrays.copyOf(source, source.length);
            for (int i = 0; i < cypher.length; i++) {
                int charIndex = alphabet.indexOf(cypher[i]);
                if (charIndex != -1) {
                    int newCharIndex = (charIndex + key) % alphabet.length();
                    cypher[i] = alphabet.charAt(newCharIndex);
                }
            }
            return cypher;
        }
    }
  learner_created: true
- name: output.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/249/implement#comment
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/46/stages/249/implement">JetBrains
    Academy</a>
  time: Sat, 14 Nov 2020 15:54:00 UTC
record: 5
